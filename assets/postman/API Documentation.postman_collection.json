{
	"info": {
		"_postman_id": "7bc1837f-49bb-4275-9106-53851c7e32d9",
		"name": "API Documentation",
		"description": "This project provides a set of APIs that enable you to learn more about Postman.\n\nThere are public APIs:\n\n- Products\n    - Get product\n    - Get all products\n- Users\n    - Create user\n    - Login\n\nAnd private APIs:\n\n- Users\n    - Me\n- Orders\n- Products\n    - Create product\n    - Update product\n    - Delete product\n\n## Authentication\n\nThe authentication is handled by calling the Login API.\n\n## Authorization\n\nThe protected APIs need a token that is generated by calling the Login API. This `token` must be sent as authorization header, ex: `Bearer {token}`.\n\n## Error codes\n\n| HTTP Status | **Response** | Description |\n| --- | --- | --- |\n| 400 Bad Request | `{ \"message\": \"Well this is embarrassing\" }` | The request is not valid. |\n| 401 Unauthorized | `{ \"code\": 401, \"message\": \"JWT Token not found\" }` | Missing, invalid or expired authorization token. A new token must be generated, more details in the Authorization setion. |\n| 403 Forbidden | `{ \"message\": \"User tried to access a page without having ROLE_ADMIN\" }` | The user does not have access to the resource. |\n| 404 Not Found | `{ \"message\": \"Product 9999999 not found\" }` | The resource was not found. |\n\n# Products\n\nThis section describes the `Products` APIs.\n\n## Create product\n\n`POST http://{host}/api/products`\n\nThis endpoint allows you to create a new product. The request should include the product's name, price, and description in the request body.\n\n`Authorization`: Bearer Token\n\n### Request Body\n\n- `name` (string): The name of the product.\n- `price` (number): The price of the product.\n- `description` (string): A brief description of the product.\n    \n\n#### Example Request Body\n\n``` json\n{\n  \"name\": \"Sample Product\",\n  \"price\": 99.99,\n  \"description\": \"This is a sample product description.\"\n}\n\n ```\n\n### Response\n\nUpon successful creation of the product, the response will include the `id` of the newly created product.\n\n##### 201 Created\n\n``` json\n{\n  \"id\": 12345\n}\n\n ```\n\n##### **400 Bad Request**\n\n##### **401 Unauthorized**\n\n##### **403 Forbidden**\n\n## Get product\n\n`GET http://{host}/api/products/{id}`\n\nThis endpoint retrieves product details based on the provided product ID. This will return the product's ID, name, price, and description in the response.\n\n### Response\n\n- `id` (number): The unique identifier of the product.\n- `name` (string): The name of the product.\n- `price` (number): The price of the product.\n- `description` (string): A brief description of the product.\n    \n\n##### 200 ok\n\n``` json\n{\n  \"id\": 1,\n  \"name\": \"Rustic Wooden Tuna\",\n  \"price\": 69.99,\n  \"description\": \"COM enable Fresh\"\n}\n\n ```\n\n##### 404 Not Found\n\n## Update product\n\n`PUT http://{host}/api/products/{id}`\n\nThis endpoint allows you to update a specific product. The request body should contain the product's name, price, and description.\n\n`Authorization`: Bearer Token\n\n### Request Body\n\n- `name` (string): The name of the product.\n- `price` (number): The price of the product.\n- `description` (string): A brief description of the product.\n    \n\n### Example\n\n``` json\n{\n  \"name\": \"Sample Product\",\n  \"price\": 25.99,\n  \"description\": \"Sample description for the product.\"\n}\n\n ```\n\n### Response\n\n- `message` (string): A message confirming the success of the update operation.\n    \n\n##### 200 ok\n\n``` json\n{\n  \"message\": \"Product 1 updated\"\n}\n\n ```\n\n##### **400 Bad Request**\n\n##### **401 Unauthorized**\n\n##### **403 Forbidden**\n\n##### 404 Not Found\n\n## Delete product\n\n`DELETE http://{host}/api/products/{id}`\n\nThis endpoint allows you to delete a specific product.\n\n`Authorization`: Bearer Token\n\n### Response\n\n##### **200 OK**\n\n``` json\n{\n  \"message\": \"Product 1 deleted\"\n}\n\n ```\n\n##### **400 Bad Request**\n\n##### **401 Unauthorized**\n\n##### **403 Forbidden**\n\n##### 404 Not Found\n\n## Get Products\n\n`GET http://{host}/api/products`\n\nThis request retrieves a list of products.\n\n### Query params\n\n- q (string, optional) - This parameter will filter the list by name. This is an optional parameter.\n    \n\n### Response\n\nThe response will include an array of product objects, where each object contains the following properties:\n\n- `id` (number): The unique identifier of the product.\n- `name` (string): The name of the product.\n- `price` (number): The price of the product.\n- `description` (string): The description of the product.\n    \n\n##### 200 OK\n\n``` json\n[\n    {\n        \"id\": 1,\n        \"name\": \"Small Granite Ball\",\n        \"price\": 750.72,\n        \"description\": \"Object-based recontextualize circuit\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"Awesome Steel Towels\",\n        \"price\": 5.29,\n        \"description\": \"syndicate white Configurable National Business-focused\"\n    }\n]\n\n ```\n\n# Users\n\nThis section describes the `Users` APIs.\n\n## Create User\n\n`POST http://{host}/api/users`\n\nThis endpoint allows you to create a new user. The request should include the user's email and password in the form-data request body.\n\n### Request Body\n\n- **email** (text): The email of the user.\n- **password** (text): The password of the user.\n- **avatar** (file): The avatar of the user.\n    \n\n### Response\n\nThe response will contain the ID of the newly created user.\n\n##### 201 Created\n\n``` json\n{\n  \"id\":1\n}\n\n ```\n\n##### **400 Bad Request**\n\n## Login\n\n`POST http://{host}/api/login_check`\n\nThis endpoint is used to authenticate the user and obtain a token for accessing protected resources.\n\n#### Request Body\n\n- `username` (string, required): The username of the user.\n- `password` (string, required): The password of the user.\n    \n\n``` json\n{\n  \"username\": \"example_username\",\n  \"password\": \"example_password\"\n}\n\n ```\n\n#### Response\n\n- `token` (string): The authentication token to be used for accessing protected resources.\n    \n\n##### 200 OK\n\n``` json\n{\n  \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSU...\"\n}\n\n ```\n\n##### **400 Bad Request**\n\n##### **401 Unauthorized**\n\n## Me\n\n`GET http://{host}/api/me`\n\nThis endpoint will return information about the current logged in user.\n\n`Authorization`: Bearer Token\n\n### Response\n\nThe response will an array of order objects, where each object contains the order ID, address, user, and total cost.\n\n##### 200 OK\n\n``` json\n{\n    \"id\": 1,\n    \"email\": \"admin@admin.com\",\n    \"avatar\": \"/uploads/avatars/god.png\"\n}\n\n ```\n\n##### **401 Unauthorized**\n\n##### 404 Not Found\n\n# Orders\n\nThis section describes the `Orders` APIs.\n\n## Create order\n\n`POST http://{host}/api/orders`\n\nThis endpoint allows you to create a new order. The request should include a payload in the raw request body type, with an array of order items and an address.\n\n`Authorization`: Bearer Token\n\n### Request Body\n\n- `orderItems`: An array of objects containing the `productId` and `quantity` for each item in the order.\n- `address`: A string representing the delivery address.\n    \n\n### Example Request\n\n``` json\n{\n    \"orderItems\": [\n        {\n            \"productId\": 1,\n            \"quantity\": 10\n        }\n    ],\n    \"address\": \"New York 5th\"\n}\n\n ```\n\n### Response\n\nUpon successful creation of the order, the response will include the `id` of the newly created order.\n\n##### 201 Created\n\n``` json\n{\n    \"id\": 1\n}\n\n ```\n\n##### **400 Bad Request**\n\n##### **401 Unauthorized**\n\n## Order list\n\n`GET http://{host}/api/orders`\n\nThis request retrieves a list of orders.\n\n`Authorization`: Bearer Token\n\n### Response\n\nThe response will an array of order objects, where each object contains the order ID, address, user, and total cost.\n\n##### 200 OK\n\n``` json\n[\n  {\n    \"id\":1,\n    \"address\":\"0556 Vivien Springs\",\n    \"user\":\"Jovani_Considine42@hotmail.com\",\n    \"total\": 10.01\n  }\n]\n\n ```\n\n##### **401 Unauthorized**\n\n## Get order\n\n`GET http://{host}/api/orders/{id}`\n\nThis endpoint retrieves the details of a specific order.\n\n`Authorization`: Bearer Token\n\n### Response\n\nThe response will contain the order's unique identifier, address, user information, a list of order items including productId, quantity, and price, and the total cost of the order.\n\n##### 200 OK\n\n``` json\n{\n    \"id\": 1,\n    \"address\": \"563 Ashlynn Place\",\n    \"user\": \"Jovani_Considine42@hotmail.com\",\n    \"orderItems\": [\n        {\n            \"productId\": 1,\n            \"quantity\": 10,\n            \"price\": 10.88\n        }\n    ],\n    \"total\": 10.88\n}\n\n ```\n\n##### **401 Unauthorized**\n\n##### 404 Not Found",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18202565",
		"_collection_link": "https://pitechteam.postman.co/workspace/Team-Workspace~b12137e7-ae8b-4643-8708-86c86bc3cb13/collection/18202565-7bc1837f-49bb-4275-9106-53851c7e32d9?action=share&source=collection_link&creator=18202565"
	},
	"item": [],
	"event": [],
	"variable": []
}
